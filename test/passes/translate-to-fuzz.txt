(module
 (type $FUNCSIG$j (func (result i64)))
 (global $hangLimit (mut i32) (i32.const 100))
 (table 1 1 anyfunc)
 (elem (i32.const 0) $func_0)
 (memory $0 1 1)
 (data (i32.const 0) "\00C\00[\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00")
 (export "func_0" (func $func_0))
 (export "hangLimitInitializer" (func $hangLimitInitializer))
 (func $func_0 (type $FUNCSIG$j) (result i64)
  (local $0 i32)
  (local $1 f64)
  (block
   (if
    (i32.eqz
     (get_global $hangLimit)
    )
    (return
     (i64.const 8235489745691165003)
    )
   )
   (set_global $hangLimit
    (i32.sub
     (get_global $hangLimit)
     (i32.const 1)
    )
   )
  )
  (block $label$0 (result i64)
   (nop)
   (select
    (i64.load8_s offset=1
     (i32.and
      (loop $label$31 (result i32)
       (block
        (if
         (i32.eqz
          (get_global $hangLimit)
         )
         (return
          (i64.const 4294967294)
         )
        )
        (set_global $hangLimit
         (i32.sub
          (get_global $hangLimit)
          (i32.const 1)
         )
        )
       )
       (get_local $0)
      )
      (i32.const 31)
     )
    )
    (i64.or
     (block $label$32 (result i64)
      (nop)
      (return
       (i64.const 1449324937471154697)
      )
     )
     (select
      (i64.load offset=4 align=1
       (i32.and
        (f32.lt
         (call $deNan32
          (f32.mul
           (f32.load offset=3
            (i32.ctz
             (i32.load8_s offset=22
              (i32.and
               (i32.const 8192)
               (i32.const 31)
              )
             )
            )
           )
           (f32.load offset=22 align=1
            (i32.and
             (get_local $0)
             (i32.const 31)
            )
           )
          )
         )
         (call $deNan32
          (f32.ceil
           (f32.load offset=3 align=2
            (i32.and
             (loop $label$35 (result i32)
              (block
               (if
                (i32.eqz
                 (get_global $hangLimit)
                )
                (return
                 (i64.const -8)
                )
               )
               (set_global $hangLimit
                (i32.sub
                 (get_global $hangLimit)
                 (i32.const 1)
                )
               )
              )
              (block $label$36 (result i32)
               (loop $label$37
                (block
                 (if
                  (i32.eqz
                   (get_global $hangLimit)
                  )
                  (return
                   (i64.const 2239996638487449961)
                  )
                 )
                 (set_global $hangLimit
                  (i32.sub
                   (get_global $hangLimit)
                   (i32.const 1)
                  )
                 )
                )
                (set_local $1
                 (f64.const -137438953472)
                )
               )
               (get_local $0)
              )
             )
             (i32.const 31)
            )
           )
          )
         )
        )
        (i32.const 31)
       )
      )
      (block $label$38 (result i64)
       (f64.store offset=4 align=4
        (i32.and
         (if (result i32)
          (i32.const -64)
          (block $label$39 (result i32)
           (if
            (i32.eqz
             (i32.const 1398099787)
            )
            (nop)
            (set_local $0
             (get_local $0)
            )
           )
           (return
            (i64.const -22)
           )
          )
          (block $label$40 (result i32)
           (drop
            (f32.const -18014398509481984)
           )
           (block $label$41 (result i32)
            (nop)
            (return
             (i64.const -9223372036854775808)
            )
           )
          )
         )
         (i32.const 31)
        )
        (get_local $1)
       )
       (select
        (br_if $label$38
         (block $label$44 (result i64)
          (set_local $1
           (f64.const -nan:0xfffffffffff86)
          )
          (return
           (i64.const 4294967295)
          )
         )
         (i32.const 1073741824)
        )
        (br_if $label$38
         (i64.const 4294967222)
         (i32.eqz
          (get_local $0)
         )
        )
        (loop $label$42 (result i32)
         (block
          (if
           (i32.eqz
            (get_global $hangLimit)
           )
           (return
            (i64.const -64)
           )
          )
          (set_global $hangLimit
           (i32.sub
            (get_global $hangLimit)
            (i32.const 1)
           )
          )
         )
         (i32.const -2147483648)
        )
       )
      )
      (loop $label$33 (result i32)
       (block
        (if
         (i32.eqz
          (get_global $hangLimit)
         )
         (return
          (i64.const 134217728)
         )
        )
        (set_global $hangLimit
         (i32.sub
          (get_global $hangLimit)
          (i32.const 1)
         )
        )
       )
       (block $label$34 (result i32)
        (br_if $label$33
         (i32.wrap/i64
          (i64.const 80)
         )
        )
        (return
         (i64.const -17179869184)
        )
       )
      )
     )
    )
    (get_local $0)
   )
  )
 )
 (func $func_1 (param $0 f32) (result i64)
  (block
   (if
    (i32.eqz
     (get_global $hangLimit)
    )
    (return
     (i64.const -2305843009213693952)
    )
   )
   (set_global $hangLimit
    (i32.sub
     (get_global $hangLimit)
     (i32.const 1)
    )
   )
  )
  (i64.le_s
   (return
    (i64.const -31)
   )
   (return
    (i64.const -10)
   )
  )
 )
 (func $hangLimitInitializer
  (set_global $hangLimit
   (i32.const 100)
  )
 )
 (func $deNan32 (param $0 f32) (result f32)
  (if (result f32)
   (f32.eq
    (get_local $0)
    (get_local $0)
   )
   (get_local $0)
   (f32.const 0)
  )
 )
 (func $deNan64 (param $0 f64) (result f64)
  (if (result f64)
   (f64.eq
    (get_local $0)
    (get_local $0)
   )
   (get_local $0)
   (f64.const 0)
  )
 )
)
